import asyncio
import logging
import aiosqlite
import os
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID_RU = int(os.getenv('CHANNEL_ID_RU', '-1001234567890'))  # –ö–∞–Ω–∞–ª –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö
CHANNEL_ID_EN = int(os.getenv('CHANNEL_ID_EN', '-1000987654321'))  # –ö–∞–Ω–∞–ª –¥–ª—è –∞–Ω–≥–ª–∏—á–∞–Ω
CHANNEL_USERNAME_RU = os.getenv('CHANNEL_USERNAME_RU', '@russian_channel')
CHANNEL_USERNAME_EN = os.getenv('CHANNEL_USERNAME_EN', '@english_channel')
REF_LINK = os.getenv('REF_LINK')
MAIN_PROMO = os.getenv('MAIN_PROMO')
ADMIN_IDS = list(map(int, os.getenv('ADMIN_IDS', '').split(','))) if os.getenv('ADMIN_IDS') else []

TEXTS = {
    'ru': {
        'start': "üí∏ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!\n\n–¢—ã –ø–æ–ø–∞–ª –≤ –∑–∞–∫—Ä—ã—Ç—É—é —Å–∏—Å—Ç–µ–º—É, –≥–¥–µ —Å–ª–∏–≤–∞—é—Ç—Å—è —Ä–∞–±–æ—á–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å—Ç–∞–≤–æ–∫ –Ω–∞ 1Win.\n–í—Å—ë, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å –ø–æ–ª—É—á–∏—à—å ‚Äî —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n–°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∞–π —Å–≤–æ—é –ø—Ä–∏–±—ã–ª—å!",
        'choose_lang': "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'instructions': "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è üëâ [–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è]({ref_link})\n2. –í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥: `{promo}`\n3. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ 1000‚ÇΩ\n\n‚è∞ *–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç!*\n–¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é!\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)' üëá",
        'not_subscribed': "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ\"",
        'subscribe_first': "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
        'help': "–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        'algorithm_sent': "üé∞ –í–∞—à –∞–ª–≥–æ—Ä–∏—Ç–º:",
        'admin_stats': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüì¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å: {subscribed_users}\nüéØ –ù–∞–∂–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {clicked_registration}\n‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª–∏ —à–∞–≥–∏: {completed_steps}\nüìä –ü–æ–ª—É—á–∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º: {got_algorithm}\n\n–Ø–∑—ã–∫–∏:\n{lang_stats}",
        'broadcast_sent': "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}",
        'confirm_steps': "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º üëá"
    },
    'en': {
        'start': "üí∏ Welcome!\n\nYou've entered a private system where working casino algorithms are leaked.\nEverything you get here is absolutely free.\n\nFollow the instructions below and start profiting!",
        'choose_lang': "üåç Please choose your language:",
        'instructions': "üìå Instructions:\n1. Click the link and register üëâ [Registration]({ref_link})\n2. Enter promo code: `{promo}`\n3. Deposit $10\n\n‚è∞ *Algorithm updates every 60 minutes!*\nHurry up to get the current working version!\n\nAfter completing all steps, click the '‚úÖ I have completed' button üëá",
        'not_subscribed': "‚ùå You are not subscribed to the channel.\nPlease subscribe and click \"Check subscription ‚úÖ\"",
        'subscribe_first': "üì¢ To access the bot, you need to subscribe to our channel!",
        'help': "Please wait, support will contact you shortly.",
        'algorithm_sent': "üé∞ Your algorithm:",
        'admin_stats': "üìä Statistics:\n\nüë• Total users: {total_users}\nüì¢ Subscribed: {subscribed_users}\nüéØ Clicked registration: {clicked_registration}\n‚úÖ Completed steps: {completed_steps}\nüìä Got algorithm: {got_algorithm}\n\nLanguages:\n{lang_stats}",
        'broadcast_sent': "‚úÖ Broadcast sent to {success} users\n‚ùå Failed to send: {failed}",
        'confirm_steps': "‚úÖ Great! Now you can get the algorithm üëá"
    }
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'database/users.db'

async def init_db():
    os.makedirs('database', exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                language TEXT DEFAULT 'ru',
                is_subscribed INTEGER DEFAULT 0,
                clicked_registration INTEGER DEFAULT 0,
                completed_steps INTEGER DEFAULT 0,
                got_algorithm INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.commit()

async def add_user(user_id: int, username: str, language: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'INSERT OR IGNORE INTO users (user_id, username, language) VALUES (?, ?, ?)',
            (user_id, username, language)
        )
        await db.commit()

async def update_user_language(user_id: int, language: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'UPDATE users SET language = ? WHERE user_id = ?',
            (language, user_id)
        )
        await db.commit()

async def update_subscription(user_id: int, status: bool):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'UPDATE users SET is_subscribed = ? WHERE user_id = ?',
            (1 if status else 0, user_id)
        )
        await db.commit()

async def update_clicked_registration(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'UPDATE users SET clicked_registration = 1 WHERE user_id = ?',
            (user_id,)
        )
        await db.commit()

async def update_completed_steps(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'UPDATE users SET completed_steps = 1 WHERE user_id = ?',
            (user_id,)
        )
        await db.commit()

async def update_algorithm_status(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            'UPDATE users SET got_algorithm = 1 WHERE user_id = ?',
            (user_id,)
        )
        await db.commit()

async def get_user_language(user_id: int) -> str:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT language FROM users WHERE user_id = ?', (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 'ru'

async def get_user_data(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT is_subscribed, clicked_registration, completed_steps, got_algorithm FROM users WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone()

async def get_all_users():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT user_id FROM users') as cursor:
            return [row[0] for row in await cursor.fetchall()]

async def get_stats():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('SELECT COUNT(*) FROM users') as cursor:
            total_users = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM users WHERE is_subscribed = 1') as cursor:
            subscribed_users = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM users WHERE clicked_registration = 1') as cursor:
            clicked_registration = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM users WHERE completed_steps = 1') as cursor:
            completed_steps = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT COUNT(*) FROM users WHERE got_algorithm = 1') as cursor:
            got_algorithm = (await cursor.fetchone())[0]
        
        async with db.execute('SELECT language, COUNT(*) FROM users GROUP BY language') as cursor:
            lang_stats = await cursor.fetchall()
        
        return {
            'total_users': total_users,
            'subscribed_users': subscribed_users,
            'clicked_registration': clicked_registration,
            'completed_steps': completed_steps,
            'got_algorithm': got_algorithm,
            'lang_stats': lang_stats
        }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")
        ]
    ])

def get_subscribe_keyboard(lang: str):
    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    channel_username = CHANNEL_USERNAME_RU if lang == 'ru' else CHANNEL_USERNAME_EN
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª" if lang == 'ru' else "üì¢ Subscribe to channel", 
                url=f"https://t.me/{channel_username[1:]}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" if lang == 'ru' else "‚úÖ Check subscription", 
                callback_data="check_sub"
            )
        ]
    ])

def get_main_keyboard(lang: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üé∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ 1Win" if lang == 'ru' else "üé∞ 1Win Registration", 
                url=REF_LINK,
                callback_data="clicked_registration"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)" if lang == 'ru' else "‚úÖ I have completed", 
                callback_data="confirm_steps"
            )
        ],
        [
            InlineKeyboardButton(
                text="üì© –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å" if lang == 'ru' else "üì© Need help", 
                callback_data="need_help"
            )
        ]
    ])

def get_algorithm_keyboard(lang: str):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üìä –ü–æ–ª—É—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º" if lang == 'ru' else "üìä Get algorithm", 
                callback_data="get_algorithm"
            )
        ]
    ])

def get_admin_keyboard(lang: str):
    text = {
        'ru': {
            'stats': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            'update': "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º",
            'broadcast': "üì¢ –†–∞—Å—Å—ã–ª–∫–∞"
        },
        'en': {
            'stats': "üìä Statistics",
            'update': "üîÑ Update algorithm",
            'broadcast': "üì¢ Broadcast"
        }
    }
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text[lang]['stats'], callback_data="admin_stats")],
        [InlineKeyboardButton(text=text[lang]['update'], callback_data="update_algorithm")],
        [InlineKeyboardButton(text=text[lang]['broadcast'], callback_data="admin_broadcast")]
    ])

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
class AlgorithmUpdate(StatesGroup):
    waiting_for_image = State()
    waiting_for_text = State()

class BroadcastState(StatesGroup):
    waiting_for_message = State()

# –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
logging.basicConfig(level=logging.INFO)

async def main():
    await init_db()
    os.makedirs('data/current_algorithm', exist_ok=True)
    
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    @dp.message(CommandStart())
    async def cmd_start(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
        await add_user(user_id, username, 'ru')
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await message.answer(
            TEXTS['ru']['choose_lang'],
            reply_markup=get_language_keyboard()
        )
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    @dp.callback_query(F.data.startswith("lang_"))
    async def choose_language(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        language = callback.data.split('_')[1]  # lang_ru -> ru
        
        await update_user_language(user_id, language)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await callback.message.edit_text(
            TEXTS[language]['subscribe_first'],
            reply_markup=get_subscribe_keyboard(language),
            disable_web_page_preview=True
        )
        await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    @dp.callback_query(F.data == "check_sub")
    async def check_subscription(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        language = await get_user_language(user_id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        channel_id = CHANNEL_ID_RU if language == 'ru' else CHANNEL_ID_EN
        
        try:
            chat_member = await callback.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            
            if chat_member.status in ["member", "administrator", "creator"]:
                await update_subscription(user_id, True)
                await callback.message.edit_text(
                    f"{TEXTS[language]['start']}\n\n{TEXTS[language]['instructions'].format(ref_link=REF_LINK, promo=MAIN_PROMO)}",
                    reply_markup=get_main_keyboard(language),
                    disable_web_page_preview=True,
                    parse_mode='Markdown'
                )
            else:
                await callback.answer(TEXTS[language]['not_subscribed'], show_alert=True)
                
        except Exception as e:
            print(f"Subscription check error: {e}")
            await callback.answer("Error checking subscription", show_alert=True)
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    @dp.callback_query(F.data == "clicked_registration")
    async def track_registration_click(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        await update_clicked_registration(user_id)
        await callback.answer()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤ (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò)
    @dp.callback_query(F.data == "confirm_steps")
    async def confirm_steps(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        language = await get_user_language(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤
        await update_completed_steps(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        await callback.message.edit_reply_markup(
            reply_markup=get_algorithm_keyboard(language)
        )
        
        await callback.answer(TEXTS[language]['confirm_steps'])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ - –û–î–ù–ò–ú –°–û–û–ë–©–ï–ù–ò–ï–ú —Å —Ç–∞–π–º–µ—Ä–æ–º —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò)
    @dp.callback_query(F.data == "get_algorithm")
    async def send_algorithm(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        language = await get_user_language(user_id)
        
        await update_algorithm_status(user_id)
        
        image_path = "data/current_algorithm/image.jpg"
        text_path = "data/current_algorithm/text.txt"
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            algorithm_text = "üöÄ Default algorithm text\n\nUse this strategy for better results!" if language == 'en' else "üöÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
            
            if os.path.exists(text_path):
                with open(text_path, 'r', encoding='utf-8') as f:
                    algorithm_text = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (1 —á–∞—Å)
            time_left = datetime.datetime.now() + datetime.timedelta(hours=1)
            
            if language == 'en':
                timer_text = f"‚è∞ **TIME SENSITIVE!**\nThis algorithm is valid until: {time_left.strftime('%H:%M:%S')}\n\n"
                full_text = f"üé∞ **YOUR WINNING ALGORITHM** üé∞\n\n{timer_text}{algorithm_text}\n\n‚úÖ *Tested and proven strategy*\nüî• *High success rate*\n\n‚ö†Ô∏è *Hurry up! Algorithm updates in 1 hour!*"
            else:
                timer_text = f"‚è∞ **–°–†–û–ß–ù–û!**\n–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {time_left.strftime('%H:%M:%S')}\n\n"
                full_text = f"üé∞ **–í–ê–® –ê–õ–ì–û–†–ò–¢–ú –ü–û–ë–ï–î** üé∞\n\n{timer_text}{algorithm_text}\n\n‚úÖ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è*\nüî• *–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞*\n\n‚ö†Ô∏è *–¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å!*"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if os.path.exists(image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –ø–æ–¥–ø–∏—Å–∏
                photo = FSInputFile(image_path)
                await callback.message.answer_photo(
                    photo=photo,
                    caption=full_text,
                    parse_mode='Markdown'
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await callback.message.answer(
                    full_text,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            print(f"Algorithm send error: {e}")
            error_text = "‚ùå Error sending algorithm. Please try again later." if language == 'en' else "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await callback.answer(error_text, show_alert=True)
        
        await callback.answer()
    
    # –ü–æ–º–æ—â—å
    @dp.callback_query(F.data == "need_help")
    async def need_help(callback: types.CallbackQuery):
        user_id = callback.from_user.id
        language = await get_user_language(user_id)
        
        await callback.message.answer(TEXTS[language]['help'])
        await callback.answer()
    
    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    @dp.message(Command("admin"))
    async def cmd_admin(message: types.Message):
        if message.from_user.id not in ADMIN_IDS:
            return
        
        language = await get_user_language(message.from_user.id)
        
        await message.answer(
            "üë®‚Äçüíª Admin Panel" if language == 'en' else "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard(language)
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    @dp.callback_query(F.data == "admin_stats")
    async def show_stats(callback: types.CallbackQuery):
        if callback.from_user.id not in ADMIN_IDS:
            return
        
        stats = await get_stats()
        language = await get_user_language(callback.from_user.id)
        
        lang_stats_text = ""
        for lang, count in stats['lang_stats']:
            lang_name = "–†—É—Å—Å–∫–∏–π" if lang == 'ru' else "English"
            lang_stats_text += f"{lang_name}: {count}\n"
        
        text = TEXTS[language]['admin_stats'].format(
            total_users=stats['total_users'],
            subscribed_users=stats['subscribed_users'],
            clicked_registration=stats['clicked_registration'],
            completed_steps=stats['completed_steps'],
            got_algorithm=stats['got_algorithm'],
            lang_stats=lang_stats_text
        )
        
        await callback.message.answer(text)
        await callback.answer()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    @dp.callback_query(F.data == "update_algorithm")
    async def update_algorithm_start(callback: types.CallbackQuery, state: FSMContext):
        if callback.from_user.id not in ADMIN_IDS:
            return
        
        language = await get_user_language(callback.from_user.id)
        text = "Send new algorithm image:" if language == 'en' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞:"
        
        await callback.message.answer(text)
        await state.set_state(AlgorithmUpdate.waiting_for_image)
        await callback.answer()
    
    @dp.message(AlgorithmUpdate.waiting_for_image, F.photo)
    async def process_algorithm_image(message: types.Message, state: FSMContext):
        os.makedirs("data/current_algorithm", exist_ok=True)
        
        photo = message.photo[-1]
        file_id = photo.file_id
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        
        await message.bot.download_file(file_path, "data/current_algorithm/image.jpg")
        
        language = await get_user_language(message.from_user.id)
        text = "Now send text for the algorithm (will be under the image):" if language == 'en' else "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ (–±—É–¥–µ—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º):"
        
        await message.answer(text)
        await state.set_state(AlgorithmUpdate.waiting_for_text)
    
    @dp.message(AlgorithmUpdate.waiting_for_text, F.text)
    async def process_algorithm_text(message: types.Message, state: FSMContext):
        with open("data/current_algorithm/text.txt", 'w', encoding='utf-8') as f:
            f.write(message.text)
        
        language = await get_user_language(message.from_user.id)
        text = "Algorithm updated successfully!" if language == 'en' else "–ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
        
        await message.answer(text)
        await state.clear()
    
    # –†–∞—Å—Å—ã–ª–∫–∞
    @dp.callback_query(F.data == "admin_broadcast")
    async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
        if callback.from_user.id not in ADMIN_IDS:
            return
        
        language = await get_user_language(callback.from_user.id)
        text = "Send message for broadcast:" if language == 'en' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
        
        await callback.message.answer(text)
        await state.set_state(BroadcastState.waiting_for_message)
        await callback.answer()
    
    @dp.message(BroadcastState.waiting_for_message)
    async def process_broadcast(message: types.Message, state: FSMContext):
        language = await get_user_language(message.from_user.id)
        users = await get_all_users()
        
        success = 0
        failed = 0
        
        for user_id in users:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.photo:
                    await message.bot.send_photo(
                        chat_id=user_id,
                        photo=message.photo[-1].file_id,
                        caption=message.caption if message.caption else ""
                    )
                elif message.video:
                    await message.bot.send_video(
                        chat_id=user_id,
                        video=message.video.file_id,
                        caption=message.caption if message.caption else ""
                    )
                else:
                    await message.bot.send_message(
                        chat_id=user_id,
                        text=message.text,
                        parse_mode='Markdown' if message.text and any(c in message.text for c in '*_`[') else None
                    )
                success += 1
            except Exception as e:
                print(f"Failed to send to {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        
        # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        result_text = TEXTS[language]['broadcast_sent'].format(
            success=success,
            failed=failed
        )
        
        await message.answer(result_text)
        await state.clear()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())